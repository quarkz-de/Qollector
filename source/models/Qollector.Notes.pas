unit Qollector.Notes;

interface

uses
  System.SysUtils, System.Generics.Collections,
  Spring, Spring.Collections, Spring.Persistence.Mapping.Attributes;

type
  TNotebook = class;

  [Entity]
  [Table('Notes')]
  TNote = class
  private
    [Column('ID', [cpRequired, cpPrimaryKey])][AutoGenerated]
    FId: Integer;
    FNotebookId: Integer;
    FCaption: String;
    FText: String;
    FNotebook: TNotebook;
  public
    property Id: Integer read FId;

    [ForeignJoinColumn('Notebook', 'Notebooks', 'Id', [fsOnDeleteCascade, fsOnUpdateCascade])]
    property NotebookId: Integer read FNotebookId write FNotebookId;

    [Column('Caption')]
    property Caption: String read FCaption write FCaption;

    [Column('Text')]
    property Text: String read FText write FText;

    [ManyToOne(False, [ckCascadeAll], 'Notebooks')]
    property Notebook: TNotebook read FNotebook write FNotebook;

    function ToString: String; override;
  end;

  [Entity]
  [Table('Notebooks')]
  TNotebook = class
  private
    [Column('ID', [cpRequired, cpPrimaryKey])][AutoGenerated]
    FId: Integer;
    FCaption: String;
    [OneToMany(False, [ckCascadeAll])]
    FNotes: Lazy<IList<TNote>>;
  public
    constructor Create;

    property Id: Integer read FId write FId;
    [Column('Caption')]
    property Caption: String read FCaption write FCaption;

    property Notes: Lazy<IList<TNote>> read FNotes write FNotes;

    function ToString: String; override;
  end;

implementation

{$REGION 'TNote'}

function TNote.ToString: String;
begin
  Result := Caption;
end;

{$ENDREGION}

{$REGION 'TNotebook'}

constructor TNotebook.Create;
begin
  FNotes := TCollections.CreateObjectList<TNote>;
end;

function TNotebook.ToString: String;
begin
  Result := Caption;
end;

{$ENDREGION}

end.
